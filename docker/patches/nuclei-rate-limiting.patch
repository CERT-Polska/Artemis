diff --git a/v2/cmd/nuclei/main.go b/v2/cmd/nuclei/main.go
index 28d1d534..be26a7d8 100644
--- a/v2/cmd/nuclei/main.go
+++ b/v2/cmd/nuclei/main.go
@@ -238,8 +238,7 @@ on extensive configurability, massive extensibility and ease of use.`)
 	)

 	flagSet.CreateGroup("rate-limit", "Rate-Limit",
-		flagSet.IntVarP(&options.RateLimit, "rate-limit", "rl", 150, "maximum number of requests to send per second"),
-		flagSet.IntVarP(&options.RateLimitMinute, "rate-limit-minute", "rlm", 0, "maximum number of requests to send per minute"),
+		flagSet.IntVarP(&options.SecondsPerRequest, "seconds-per-request", "spr", 1, "Allow at most one request in given number of seconds"),
 		flagSet.IntVarP(&options.BulkSize, "bulk-size", "bs", 25, "maximum number of hosts to be analyzed in parallel per template"),
 		flagSet.IntVarP(&options.TemplateThreads, "concurrency", "c", 25, "maximum number of templates to be executed in parallel"),
 		flagSet.IntVarP(&options.HeadlessBulkSize, "headless-bulk-size", "hbs", 10, "maximum number of headless hosts to be analyzed in parallel per template"),
diff --git a/v2/internal/runner/runner.go b/v2/internal/runner/runner.go
index 8b396a78..c882ed7b 100644
--- a/v2/internal/runner/runner.go
+++ b/v2/internal/runner/runner.go
@@ -317,6 +317,8 @@ func New(options *types.Options) (*Runner, error) {
 		runner.rateLimiter = ratelimit.New(context.Background(), uint(options.RateLimitMinute), time.Minute)
 	} else if options.RateLimit > 0 {
 		runner.rateLimiter = ratelimit.New(context.Background(), uint(options.RateLimit), time.Second)
+	} else if options.SecondsPerRequest > 0 {
+		runner.rateLimiter = ratelimit.New(context.Background(), 1, time.Duration(options.SecondsPerRequest) * time.Second)
 	} else {
 		runner.rateLimiter = ratelimit.NewUnlimited(context.Background())
 	}
diff --git a/v2/pkg/types/types.go b/v2/pkg/types/types.go
index 101e7c1b..1b7ea942 100644
--- a/v2/pkg/types/types.go
+++ b/v2/pkg/types/types.go
@@ -159,6 +159,8 @@ type Options struct {
 	RateLimit int
 	// Rate-Limit is the maximum number of requests per minute for specified target
 	RateLimitMinute int
+	// at most one request can happen in SecondsPerRequest seconds
+	SecondsPerRequest int
 	// PageTimeout is the maximum time to wait for a page in seconds
 	PageTimeout int
 	// InteractionsCacheSize is the number of interaction-url->req to keep in cache at a time.
