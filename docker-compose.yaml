version: "3"

services:
  minio:
    command: "server /data"
    environment:
     - MINIO_ACCESS_KEY=example-access-key
     - MINIO_SECRET_KEY=example-secret-key
    image: minio/minio
    restart: always

  redis:
    image: redis
    restart: always
    volumes:
      - data-redis:/data

  db:
    command: ["--wiredTigerCacheSizeGB", "2"]
    environment:
     - MONGO_INITDB_ROOT_USERNAME=root
     - MONGO_INITDB_ROOT_PASSWORD=root
    image: mongo
    ports: [27017:27017]
    restart: always
    volumes:
     - data-mongodb:/data/db

  autoreporter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    env_file: .env
    volumes:
      # Because the options parsing (which will tell us which previous reports directory the
      # user needs) happens inside the container, we don't know what directory to mount before
      # starting the container. This solution is far from perfect - feel free to propose a better
      # one.
      - /:/host-root/:ro
      - ./output/autoreporter/:/opt/output/autoreporter
      - ./docker/karton.ini:/etc/karton/karton.ini
    profiles: ["autoreporter"]  # This will prevent the service from starting by default

  karton-system:
    command: ["--setup-bucket"]
    depends_on: ["db", "redis", "minio"]
    env_file: .env
    image: "certpl/karton-system:v5.2.0"
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]
    restart: always

  karton-logger:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.stdout_logger"
    depends_on: [karton-system]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  metrics:
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on: [karton-logger]
    env_file: .env
    ports: ["9000:9000"]
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]
    command: "python3 -m artemis.metrics"

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on: [karton-logger]
    env_file: .env
    environment:
     - DASHBOARD_URL=http://127.0.0.1:5001
    ports: ["5000:5000"]
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-dashboard:
    depends_on: [karton-logger]
    env_file: .env
    image: certpl/karton-dashboard:v1.5.0
    ports: [5001:5000]
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-classifier:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.classifier"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-port_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.port_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-robots:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.robots"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-vcs:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.vcs"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-crtsh:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.crtsh"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-gau:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.gau"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-ip-lookup:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.ip_lookup"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-reverse-dns:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.reverse_dns_lookup"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-directory_index:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.directory_index"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-identifier:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.webapp_identifier"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-joomla_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.joomla_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-wp_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.wp_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-dns_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.dns_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-ftp_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.ftp_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-http_service_to_url:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.http_service_to_url"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-mysql_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.mysql_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-mail_dns_scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.mail_dns_scanner"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-nuclei:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.nuclei"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes:
      - "./docker/karton.ini:/etc/karton/karton.ini"
      - data-nuclei-templates:/root/nuclei-templates
      - data-nuclei-config:/root/.config/nuclei

  karton-postman:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.postman"
    depends_on: [karton-logger]
    env_file: .env
    environment:
     - POSTMAN_MAIL_FROM=artemis@example.com
     - POSTMAN_MAIL_TO=artemis@example.com
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-postgresql_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.postgresql_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-wordpress_bruter:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.wordpress_bruter"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

  karton-shodan_vulns:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: "python3 -m artemis.modules.shodan_vulns"
    depends_on: [karton-logger]
    env_file: .env
    restart: always
    volumes: ["./docker/karton.ini:/etc/karton/karton.ini"]

volumes:
  data-mongodb:
  data-redis:
  data-nuclei-templates:
  data-nuclei-config:
