{
  "openapi": "3.0.3",
  "info": {
    "title": "Vulnerable Test API",
    "description": "A deliberately vulnerable test API demonstrating SQL Injection, XSS false positives, and additional false positive cases for security scanner testing.",
    "version": "1.1.0"
  },
  "servers": [
    {
      "url": "http://test-flask-vulnerable-api:5000"
    }
  ],
  "paths": {
    "/api/login": {
      "post": {
        "summary": "Login endpoint (vulnerable to SQLi)",
        "description": "Accepts username and password in JSON body.\nSQL injection possible via body parameters.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/user/{username}": {
      "get": {
        "summary": "Get user by username (vulnerable to SQLi)",
        "description": "Retrieves user info based on username in URL path.\nSQL injection possible via path parameter.",
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "randomuser"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/ssti": {
      "get": {
        "summary": "SSTI endpoint (vulnerable)",
        "description": "Renders a user-provided string as a Jinja2 template. This endpoint is vulnerable to Server-Side Template Injection (SSTI) via the 'template' query parameter.",
        "parameters": [
          {
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "this is my query"
          }
        ],
        "responses": {
          "200": {
            "description": "The rendered template output.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "this is my query"
                }
              }
            }
          }
        }
      }
    },
    "/api/fp/xss": {
      "get": {
        "summary": "XSS Test Endpoint",
        "description": "Reflects a user-provided payload in a response with a Content-Type of 'application/problem+json'. This is designed to test for reflected XSS false positives.",
        "parameters": [
          {
            "in": "query",
            "name": "payload",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "some text"
          }
        ],
        "responses": {
          "400": {
            "description": "Problem Details response reflecting the payload.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/fp/sleep": {
      "get": {
        "summary": "False Positive: Always sleeps 5 seconds",
        "description": "This endpoint always responds after 5 seconds. Useful for ensuring time-based SQLi false positives arenâ€™t triggered.",
        "parameters": [
          {
            "in": "query",
            "name": "input",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "test"
          }
        ],
        "responses": {
          "200": {
            "description": "Always responds with success after sleep",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/fp/error": {
      "get": {
        "summary": "False Positive: Always returns 500",
        "description": "This endpoint always fails with a 500 Internal Server Error, independent of input. Useful for error-based SQLi false positive testing.",
        "parameters": [
          {
            "in": "query",
            "name": "input",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "test"
          }
        ],
        "responses": {
          "500": {
            "description": "Always fails with 500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/fp/echo": {
      "get": {
        "summary": "False Positive: Echo input",
        "description": "Echoes back the provided query parameter `q`. Useful for ensuring XSS/SSTI payloads are not misclassified.",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "this is my query"
          }
        ],
        "responses": {
          "200": {
            "description": "Echoed response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EchoResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "False Positive: Echo JSON input",
        "description": "Echoes back the provided JSON body `{q: value}`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EchoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Echoed response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EchoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/fp/ssti": {
      "get": {
        "summary": "False Positive: Fake SSTI",
        "description": "Always returns a static message with '49 is a dangerous number', regardless of input. Used to test SSTI misclassifications.",
        "parameters": [
          {
            "in": "query",
            "name": "template",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "this is my query"
          }
        ],
        "responses": {
          "200": {
            "description": "Static response with SSTI-like value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericMessage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "example": "randomuser"
          },
          "password": {
            "type": "string",
            "example": "supersecret"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "username": {
            "type": "string",
            "example": "randomuser"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "randomuser"
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "format": "uri",
            "example": "about:blank"
          },
          "title": {
            "type": "string",
            "example": "XSS Test Endpoint"
          },
          "status": {
            "type": "integer",
            "example": 400
          },
          "detail": {
            "type": "string",
            "example": "The provided payload was: some text"
          },
          "instance": {
            "type": "string",
            "format": "uri-reference",
            "example": "/api/xss?payload=some text"
          }
        }
      },
      "GenericMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "This endpoint always sleeps 5 seconds"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "This endpoint always fails with 500"
          }
        }
      },
      "EchoRequest": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "example": "this is my query"
          }
        }
      },
      "EchoResponse": {
        "type": "object",
        "properties": {
          "echo": {
            "type": "string",
            "example": "this is my query"
          }
        }
      }
    }
  }
}
