# type: ignore
"""Initial migration

Revision ID: 99b5570a348e
Revises:
Create Date: 2024-06-20 11:51:11.766529

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy import inspect

from artemis.config import Config
from artemis.db import TSVector

# revision identifiers, used by Alembic.
revision = "99b5570a348e"
down_revision = None
branch_labels = None
depends_on = None

DATABASE_URL = Config.Data.POSTGRES_CONN_STR
engine = sa.create_engine(DATABASE_URL)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not inspect(engine).has_table("analysis"):
        op.create_table(
            "analysis",
            sa.Column("id", sa.String(), nullable=False),
            sa.Column("created_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True),
            sa.Column("target", sa.String(), nullable=True),
            sa.Column("tag", sa.String(), nullable=True),
            sa.Column("stopped", sa.Boolean(), nullable=True),
            sa.Column(
                "fulltext",
                TSVector(),
                sa.Computed("to_tsvector('english', COALESCE(tag, '') || ' ' || COALESCE(target, ''))", persisted=True),
                nullable=True,
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index("analysis_fulltext", "analysis", ["fulltext"], unique=False, postgresql_using="gin")
        op.create_index(op.f("ix_analysis_stopped"), "analysis", ["stopped"], unique=False)
        op.create_index(op.f("ix_analysis_tag"), "analysis", ["tag"], unique=False)
        op.create_index(op.f("ix_analysis_target"), "analysis", ["target"], unique=False)

    if not inspect(engine).has_table("report_generation_task"):
        op.create_table(
            "report_generation_task",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("created_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True),
            sa.Column("comment", sa.String(), nullable=True),
            sa.Column("status", sa.String(), nullable=True),
            sa.Column("tag", sa.String(), nullable=True),
            sa.Column("language", sa.String(), nullable=True),
            sa.Column("skip_previously_exported", sa.Boolean(), nullable=True),
            sa.Column("custom_template_arguments", sa.JSON(), nullable=True),
            sa.Column("output_location", sa.String(), nullable=True),
            sa.Column("error", sa.String(), nullable=True),
            sa.Column("alerts", sa.JSON(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(op.f("ix_report_generation_task_comment"), "report_generation_task", ["comment"], unique=False)
        op.create_index(op.f("ix_report_generation_task_status"), "report_generation_task", ["status"], unique=False)

    if not inspect(engine).has_table("scheduled_task"):
        op.create_table(
            "scheduled_task",
            sa.Column("created_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True),
            sa.Column("analysis_id", sa.String(), nullable=False),
            sa.Column("deduplication_data", sa.String(), nullable=False),
            sa.Column("deduplication_data_original", sa.String(), nullable=True),
            sa.Column("task_id", sa.String(), nullable=True),
            sa.PrimaryKeyConstraint("analysis_id", "deduplication_data"),
        )

    if not inspect(engine).has_table("task_result"):
        op.create_table(
            "task_result",
            sa.Column("id", sa.String(), nullable=False),
            sa.Column("analysis_id", sa.String(), nullable=True),
            sa.Column("created_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True),
            sa.Column("status", sa.String(), nullable=True),
            sa.Column("tag", sa.String(), nullable=True),
            sa.Column("receiver", sa.String(), nullable=True),
            sa.Column("target_string", sa.String(), nullable=True),
            sa.Column("status_reason", sa.String(), nullable=True),
            sa.Column("headers_string", sa.String(), nullable=True),
            sa.Column("task", sa.JSON(), nullable=True),
            sa.Column("result", sa.JSON(), nullable=True),
            sa.Column(
                "fulltext",
                TSVector(),
                sa.Computed(
                    "to_tsvector('english', COALESCE(status, '') || ' ' || COALESCE(tag, '') || ' ' || COALESCE(target_string, '') || ' ' || COALESCE(headers_string, '') || ' ' || COALESCE(status_reason, ''))",
                    persisted=True,
                ),
                nullable=True,
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(op.f("ix_task_result_analysis_id"), "task_result", ["analysis_id"], unique=False)
        op.create_index(op.f("ix_task_result_receiver"), "task_result", ["receiver"], unique=False)
        op.create_index(op.f("ix_task_result_status"), "task_result", ["status"], unique=False)
        op.create_index(op.f("ix_task_result_tag"), "task_result", ["tag"], unique=False)
        op.create_index(op.f("ix_task_result_target_string"), "task_result", ["target_string"], unique=False)
        op.create_index("task_result_fulltext", "task_result", ["fulltext"], unique=False, postgresql_using="gin")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("task_result_fulltext", table_name="task_result", postgresql_using="gin")
    op.drop_index(op.f("ix_task_result_target_string"), table_name="task_result")
    op.drop_index(op.f("ix_task_result_tag"), table_name="task_result")
    op.drop_index(op.f("ix_task_result_status"), table_name="task_result")
    op.drop_index(op.f("ix_task_result_receiver"), table_name="task_result")
    op.drop_index(op.f("ix_task_result_analysis_id"), table_name="task_result")
    op.drop_table("task_result")
    op.drop_table("scheduled_task")
    op.drop_index(op.f("ix_report_generation_task_status"), table_name="report_generation_task")
    op.drop_index(op.f("ix_report_generation_task_comment"), table_name="report_generation_task")
    op.drop_table("report_generation_task")
    op.drop_index(op.f("ix_analysis_target"), table_name="analysis")
    op.drop_index(op.f("ix_analysis_tag"), table_name="analysis")
    op.drop_index(op.f("ix_analysis_stopped"), table_name="analysis")
    op.drop_index("analysis_fulltext", table_name="analysis", postgresql_using="gin")
    op.drop_table("analysis")
    # ### end Alembic commands ###
