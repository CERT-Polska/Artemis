diff --git a/src/offat/tester/generator.py b/src/offat/tester/generator.py
index 3c990dd..dc3ed9c 100644
--- a/src/offat/tester/generator.py
+++ b/src/offat/tester/generator.py
@@ -2,6 +2,7 @@
 This module contains the TestGenerator class which is used to generate API test checks.
 '''
 from copy import deepcopy
+from random import randint
 from .fuzzer import fill_params
 from .post_test_processor import PostTestFiltersEnum
 from .fuzzer import generate_random_int
@@ -269,10 +270,19 @@ class TestGenerator:
             "' AND SLEEP(5) --",
         ]
 
+        SQL_INJECTION_TIME_THRESHOLD = 5
+
+        sql_injection_sleep_payloads = [
+            f"sleep({SQL_INJECTION_TIME_THRESHOLD})",
+            f"pg_sleep({SQL_INJECTION_TIME_THRESHOLD})",
+            f"'||sleep({SQL_INJECTION_TIME_THRESHOLD})||'",
+            f"'||pg_sleep({SQL_INJECTION_TIME_THRESHOLD})||'",
+        ]
+
         fuzzed_request_list = self.__fuzz_request_params(openapi_parser)
 
         # inject SQLi payloads in string variables
-        for sqli_payload in basic_sqli_payloads:
+        for sqli_payload in basic_sqli_payloads + sql_injection_sleep_payloads:
             for request_obj in fuzzed_request_list:
                 # handle body request params
                 body_request_params = request_obj.get('body_params', [])
@@ -305,6 +315,10 @@ class TestGenerator:
                 request_obj[
                     'response_filter'
                 ] = PostTestFiltersEnum.STATUS_CODE_FILTER.name
+
+                request_obj['sleep_payload'] = (
+                    sqli_payload in sql_injection_sleep_payloads
+                )
                 tasks.append(deepcopy(request_obj))
 
         return tasks
@@ -354,6 +368,15 @@ class TestGenerator:
             "' AND SLEEP(5) --",
         ]
 
+        SQL_INJECTION_TIME_THRESHOLD = 5
+
+        sql_injection_sleep_payloads = [
+            f"sleep({SQL_INJECTION_TIME_THRESHOLD})",
+            f"pg_sleep({SQL_INJECTION_TIME_THRESHOLD})",
+            f"'||sleep({SQL_INJECTION_TIME_THRESHOLD})||'",
+            f"'||pg_sleep({SQL_INJECTION_TIME_THRESHOLD})||'",
+        ]
+
         tasks = []
         for sqli_payload in basic_sqli_payloads:
             for path_obj in endpoints_with_param_in_path:
@@ -409,6 +432,7 @@ class TestGenerator:
                             False: 'Endpoint is not vulnerable to SQLi',
                         },
                         'success_codes': success_codes,
+                        'sleep_payload': sqli_payload in sql_injection_sleep_payloads,
                         'response_filter': PostTestFiltersEnum.STATUS_CODE_FILTER.name,
                     }
                 )
@@ -944,17 +968,28 @@ class TestGenerator:
         '''
         test_name = 'SSTI Test'
 
+        num1 = randint(123, 1337)
+        num2 = randint(123, 1337)
         payloads_data = [
-            {'request_payload': r'${7777+99999}', 'response_match_regex': r'107776'},
-            {'request_payload': r"{{7*'7'}}", 'response_match_regex': r'49'},
-            {'request_payload': r"{{7*'7'}}", 'response_match_regex': r'7777777'},
             {
-                'request_payload': r"{{ '<script>confirm(1337)</script>' }}",
-                'response_match_regex': r'<script>confirm(1337)</script>',
+                'request_payload': rf'${{{num1}+{num2}}}',
+                'response_match_regex': rf'{num1+num2}',
             },
             {
-                'request_payload': r"{{ '<script>confirm(1337)</script>' | safe }}",
-                'response_match_regex': r'<script>confirm(1337)</script>',
+                'request_payload': rf"\{{{{{num1}*'{num2}'}}}}",
+                'response_match_regex': rf'{num1*num2}',
+            },
+            {
+                'request_payload': rf"\{{{{{num1}*'{num2}'}}}}",
+                'response_match_regex': rf'{num1*str(num2)}',
+            },
+            {
+                'request_payload': rf"{{{{ '<script>confirm({num1})</script>' }}}}",
+                'response_match_regex': rf'<script>confirm({num1})</script>',
+            },
+            {
+                'request_payload': rf"{{{{ '<script>confirm({num2})</script>' | safe }}}}",
+                'response_match_regex': rf'<script>confirm({num2})</script>',
             },
             {
                 'request_payload': r"{{'owasp offat'.toUpperCase()}}",
@@ -968,7 +1003,10 @@ class TestGenerator:
                 'request_payload': r"<%= system('cat /etc/passwd') %>",
                 'response_match_regex': r'root:.*',
             },
-            {'request_payload': r'*{7*7}', 'response_match_regex': r'49'},
+            {
+                'request_payload': rf'*{{{num1}*{num2}}}',
+                'response_match_regex': rf'{num1*num2}',
+            },
         ]
 
         vuln_details = {
diff --git a/src/offat/tester/post_test_processor.py b/src/offat/tester/post_test_processor.py
index de0d812..9a9ada5 100644
--- a/src/offat/tester/post_test_processor.py
+++ b/src/offat/tester/post_test_processor.py
@@ -139,6 +139,45 @@ class PostRunTests:
 
         return new_results
 
+    @staticmethod
+    def check_time_based_sqli(
+        results: list[dict], SQL_INJECTION_SLEEP_THRESHOLD: float = 5
+    ) -> list[dict]:
+        """
+        Checks SQLi results for time-based blind SQL injection vulnerabilities.
+
+        Args:
+            results (list[dict]): List of test results.
+            SQL_INJECTION_SLEEP_THRESHOLD (float): Time threshold (in seconds) to determine a time-based SQLi.
+
+        Returns:
+            list[dict]: Updated list with vulnerability marked for time-based SQLi.
+        """
+        updated_results = []
+
+        for result in results:
+            test_name = result.get('test_name', '')
+            is_sql_test = 'SQLi' in test_name or 'sql' in test_name.lower()
+            sleep_payload = result.get('sleep_payload', False)
+            response_time = result.get('response_time')
+
+            new_result = deepcopy(result)
+
+            if (
+                is_sql_test
+                and sleep_payload
+                and isinstance(response_time, (int, float))
+            ):
+                new_result['vulnerable'] = response_time > SQL_INJECTION_SLEEP_THRESHOLD
+                new_result['vuln_details'] = {
+                    True: f"Response time exceeded threshold, possible time-based SQL injection.",
+                    False: f"Response time did not exceed threshold, likely not vulnerable.",
+                }
+
+            updated_results.append(new_result)
+
+        return updated_results
+
     @staticmethod
     def update_result_details(results: list[dict]):
         new_results = []
diff --git a/src/offat/tester/runner.py b/src/offat/tester/runner.py
index e339c6e..7e0faee 100644
--- a/src/offat/tester/runner.py
+++ b/src/offat/tester/runner.py
@@ -4,6 +4,7 @@ from enum import Enum
 from sys import exc_info, exit
 from traceback import format_exc
 from rich.progress import Progress, TaskID
+from time import time
 
 from ..http import AsyncRequests
 from ..logger import logger, console
@@ -136,10 +137,24 @@ class TestRunner:
             test_result['error'] = False
 
             return test_result
+        is_sql_test = test_task.get('test_name') in [
+            'Checking for SQLi vulnerability',
+            'Checking for SQLi vulnerability in URI Path',
+        ]
+
         try:
+            # Time the request if it's an SQL test
+            if is_sql_test:
+                start_time = time()
+
             response = await self._client.request(
                 url=url, method=http_method, *args, **kwargs
             )
+
+            if is_sql_test:
+                end_time = time()
+                test_result['response_time'] = end_time - start_time  # in seconds
+
             # add request headers to result
             test_result['request_headers'] = response.get('req_headers', [])
             # append response headers and body for analyzing data leak
diff --git a/src/offat/tester/tester_utils.py b/src/offat/tester/tester_utils.py
index 4194099..e3597a9 100644
--- a/src/offat/tester/tester_utils.py
+++ b/src/offat/tester/tester_utils.py
@@ -114,6 +114,8 @@ def run_test(
         # update test result for status based code filter
         test_results = PostRunTests.filter_status_code_based_results(test_results)
 
+    test_results = PostRunTests.check_time_based_sqli(test_results)
+
     # update tests result success/failure details
     test_results = PostRunTests.update_result_details(test_results)
 
